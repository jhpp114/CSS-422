00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/15/2020 5:44:56 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68k   Disassembler    
00000000                             3  * Written by :
00000000                             4  * Date       : 06/xx/2020    
00000000                             5  * Description: Final Project    
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  *_______Basic Print Out Welcome Message__________   
00001000  43F9 00001153             12      LEA Mes_Welcome,    A1  
00001006  103C 000D                 13      MOVE.B  #13,    D0  
0000100A  4E4F                      14      TRAP    #15 
0000100C                            15      
0000100C                            16  *_______Get User Input____________________________
0000100C                            17  Get_Input_Start_ADR
0000100C  4282                      18      CLR.L   D2  
0000100E  4283                      19      CLR.L   D3
00001010                            20     
00001010  43F9 00001190             21      LEA Mes_Start_Adr,  A1  ; ask start loc
00001016  103C 000E                 22      MOVE.B  #14, D0   
0000101A  4E4F                      23      Trap    #15     
0000101C  43F9 0000126C             24      LEA UserInput,  A1  ;   get user input  
00001022  103C 0002                 25      MOVE.B  #2, D0  
00001026  4E4F                      26      TRAP    #15 
00001028                            27   
00001028  4EB9 0000108E             28      JSR ConvertInput        
0000102E                            29      * check if the address is odd then throw error just read right bit  
0000102E                            30      *ANDI.B  #1, D3  
0000102E  0803 0000                 31      BTST #0,    D3 * is Even?  
00001032  6600 00FC                 32      BNE Invalid_Adr_Not_Even  * Not even then go to invalid        
00001036                            33      
00001036                            34      * Store user Input start address to A5
00001036  23C3 00001270             35      MOVE.L  D3, StartLocData
0000103C  2A79 00001270             36      MOVE.L  StartLocData, A5  
00001042                            37      
00001042                            38  *_________Check Start Adr is Even Number__________________
00001042                            39  
00001042                            40          
00001042                            41  Get_Input_End_ADR  
00001042  4282                      42      CLR.L   D2  
00001044  4283                      43      CLR.L   D3  
00001046                            44      
00001046  43F9 000011B2             45      LEA Mes_End_Adr,    A1  ;   ask ending loc  
0000104C  103C 000E                 46      MOVE.B  #14,    D0       
00001050  4E4F                      47      TRAP    #15 
00001052                            48      
00001052  43F9 00001274             49      LEA EndLocData, A1  ;   get user input  
00001058  103C 0002                 50      MOVE.B  #2, D0  
0000105C  4E4F                      51      Trap    #15 
0000105E                            52   
0000105E  4EB9 0000108E             53      JSR ConvertInput    
00001064                            54      * check if the address is odd then throw error just read right bit 
00001064  0803 0000                 55      BTST    #0, D3  
00001068  6600 00C6                 56      BNE Invalid_Adr_Not_Even    
0000106C                            57      * Store user Input start address to A6  
0000106C  23C3 00001274             58      MOVE.L  D3, EndLocData
00001072  2C79 00001274             59      MOVE.L  EndLocData, A6  
00001078                            60      
00001078                            61  *________________________________________________________   
00001078                            62  *   Compare Starting Address and End Address see if it make sense       
00001078                            63  Check_Input_Address
00001078  4282                      64      CLR.L   D2  * clr out before use it 
0000107A  4283                      65      CLR.L   D3  * clr out before use it 
0000107C  240D                      66      MOVE.L  A5, D2  * move starting adr to d2 to check   
0000107E  260E                      67      MOVE.L  A6, D3  * move ending adr to d3 to check    
00001080  B483                      68      CMP.L   D3, D2  * end address is not bigger than starting addr and address same? Error  
00001082  6C00 0090                 69      BGE Invalid_Starting_Ending_Adr
00001086                            70      
00001086  4282                      71      CLR.L   D2 
00001088  4283                      72      CLR.L   D3  
0000108A  6000 00C0                 73      BRA Finish  
0000108E                            74      
0000108E                            75  *_______End of User Input Adr______________________________ 
0000108E                            76  *   Subroutine
0000108E                            77  *_________________________________________________
0000108E                            78  ConvertInput        
0000108E  1419                      79         MOVE.B  (A1)+,  D2   
00001090  4EB9 000010A6             80         JSR    ConvertASCII
00001096  D682                      81         ADD.L    D2, D3  * copy D2 to D3 
00001098                            82         *ADDA.L   D3, A4      
00001098  0C11 0000                 83         CMPI.B   #$0,    (A1)    
0000109C  6700 0006                 84         BEQ GoBack
000010A0  E98B                      85         LSL.L    #4, D3  * Make room for next byte  
000010A2                            86          
000010A2  60EA                      87         BRA  ConvertInput
000010A4                            88  GoBack  
000010A4                            89          *MOVEA.L D3, A4  
000010A4  4E75                      90          RTS    
000010A6                            91  ConvertASCII
000010A6  0C02 0030                 92          CMPI.B  #$30,   D2     * Any input that are less than 30 is error    
000010AA  6D00 0048                 93          BLT Input_Error_Handler
000010AE  0C02 0067                 94          CMPI.B  #$67,   D2    * Any input that are more or equal to 67 (g) is error 
000010B2  6C00 0040                 95          BGE Input_Error_Handler  
000010B6                            96          * 30~39 Number
000010B6                            97          * 41~46 Cap Letter Till F
000010B6                            98          * 61~66 Till f
000010B6  0C02 0039                 99          CMPI.B   #$39,   D2 * 40 is immeidate data use CMPI   
000010BA  6F00 0012                100          BLE IsNumber * If less than 40 then execute  
000010BE                           101          *________________________________________________
000010BE  0C02 0040                102          CMPI.B  #$40,   D2  *   if it is between 3A (:) and 40 (@) throw Error   
000010C2  6F00 0030                103          BLE Input_Error_Handler
000010C6                           104          *_______________________________________________
000010C6  0C02 0041                105          CMPI.B  #$41,   D2  * if not compare with 41 (A)    
000010CA  6C00 0008                106          BGE IsLetter    *Bigger than or Equal to 41 then execute    
000010CE                           107  IsNumber
000010CE  0402 0030                108          SUB.B   #$30,   D2        
000010D2  4E75                     109          RTS 
000010D4                           110  IsLetter
000010D4                           111          * figure out either small leter or capital letter   
000010D4  0C02 0046                112          CMPI.B  #$46,   D2  * Compare with small letter F            
000010D8  6F00 0006                113          BLE CapitalLetter   * if less or equal to 46 than small letter     
000010DC  6000 0008                114          BRA SmallLetter     * else go to capital letter 
000010E0                           115  CapitalLetter   
000010E0  0402 0037                116          SUB.B   #$37,   D2   * 46 - 37 = F
000010E4  4E75                     117          RTS 
000010E6                           118  SmallLetter  
000010E6  0C02 0060                119          CMPI.B  #$60,   D2  * if less than or equal to 60 (') throw Error   
000010EA  6F00 0008                120          BLE Input_Error_Handler
000010EE  0402 0057                121          SUB.B   #$57,   D2    
000010F2  4E75                     122          RTS  
000010F4                           123  *_________________________Error Handle___________________________________      
000010F4                           124  Input_Error_Handler
000010F4  6000 0002                125          BRA Invalid 
000010F8                           126          
000010F8                           127  Invalid 
000010F8  43F9 00001150            128          LEA Extra_Space,    A1  
000010FE  103C 000E                129          MOVE.B  #14,    D0  
00001102  4E4F                     130          TRAP    #15 
00001104  43F9 000011D2            131          LEA Mes_Invalid, A1 
0000110A  103C 000E                132          MOVE.B  #14,    D0  
0000110E  4E4F                     133          TRAP    #15 
00001110  6000 FEFA                134          BRA  Get_Input_Start_ADR    
00001114                           135          
00001114                           136  Invalid_Starting_Ending_Adr
00001114  43F9 00001150            137          LEA  Extra_Space,   A1  
0000111A  103C 000E                138          MOVE.B  #14,    D0  
0000111E  4E4F                     139          TRAP    #15 
00001120  43F9 0000122D            140          LEA Mes_Starting_Ending_Adr_Error,  A1  
00001126  103C 000E                141          MOVE.B  #14,    D0  
0000112A  4E4F                     142          TRAP    #15 
0000112C  6000 FEDE                143          BRA Get_Input_Start_ADR
00001130                           144           
00001130                           145  Invalid_Adr_Not_Even
00001130  43F9 00001150            146          LEA Extra_Space,    A1  
00001136  103C 000E                147          MOVE.B  #14,    D0  
0000113A  4E4F                     148          TRAP    #15 
0000113C  43F9 000011F8            149          LEA Mes_EvenNumber_Error,   A1  
00001142  103C 000E                150          MOVE.B  #14,    D0  
00001146  4E4F                     151          TRAP    #15 
00001148  6000 FEC2                152          BRA Get_Input_Start_ADR 
0000114C                           153      
0000114C                           154  
0000114C                           155      
0000114C  FFFF FFFF                156  Finish  SIMHALT             ; halt simulator
00001150                           157          
00001150                           158  
00001150                           159  * Put variables and constants here
00001150                           160  * Basic Print Message   
00001150                           161  *____________________________________________________________________
00001150  =0000000D                162  CR  EQU $0D     *   Carriage Return
00001150  =0000000A                163  LF  EQU $0A     *   Line Feed
00001150= 0D 0A 00                 164  Extra_Space DC.B    CR, LF, 0 
00001153= 57 65 6C 63 6F 6D ...    165  Mes_Welcome     DC.B    'Welcome to Disassembler Program', CR,  LF
00001174= 46 69 6E 61 6C 20 ...    166                              DC.B    'Final Project for CSS 422',    CR, LF, 0
00001190= 50 6C 65 61 73 65 ...    167  Mes_Start_Adr       DC.B    'Please Enter Starting Location: $', 0
000011B2= 50 6C 65 61 73 65 ...    168  Mes_End_Adr     DC.B    'Please Enter Ending Location: $', 0
000011D2                           169  
000011D2= 54 68 65 20 41 64 ...    170  Mes_Invalid DC.B   'The Address You provided is Invalid', CR,  LF,  0   
000011F8                           171              
000011F8= 54 68 65 20 41 64 ...    172  Mes_EvenNumber_Error    DC.B    'The Address You provided is not even ending number',  CR, LF, 0
0000122D= 59 6F 75 72 20 53 ...    173  Mes_Starting_Ending_Adr_Error   DC.B    'Your Starting Address is bigger or equal than Ending Adrress', CR, LF, 0   
0000126C                           174    
0000126C                           175  
0000126C                           176  * Define Storage
0000126C                           177  *_____________________________________________________________________
0000126C                           178  UserInput   DS.L    1   
00001270                           179  StartLocData    DS.L    1   * store starting address
00001274                           180  EndLocData  DS.L    1   *   Store ending address    
00001278                           181  
00001278                           182      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CAPITALLETTER       10E0
CHECK_INPUT_ADDRESS  1078
CONVERTASCII        10A6
CONVERTINPUT        108E
CR                  D
ENDLOCDATA          1274
EXTRA_SPACE         1150
FINISH              114C
GET_INPUT_END_ADR   1042
GET_INPUT_START_ADR  100C
GOBACK              10A4
INPUT_ERROR_HANDLER  10F4
INVALID             10F8
INVALID_ADR_NOT_EVEN  1130
INVALID_STARTING_ENDING_ADR  1114
ISLETTER            10D4
ISNUMBER            10CE
LF                  A
MES_END_ADR         11B2
MES_EVENNUMBER_ERROR  11F8
MES_INVALID         11D2
MES_STARTING_ENDING_ADR_ERROR  122D
MES_START_ADR       1190
MES_WELCOME         1153
SMALLLETTER         10E6
START               1000
STARTLOCDATA        1270
USERINPUT           126C
